/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sgbd.forms.dialogs;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import sgbd.controllers.Controller;
import sgbd.controllers.DatabaseObjectTextDocument;

/**
 *
 * @author Kazed
 */
public class TableCreationPanel extends javax.swing.JPanel {
    
    private Controller controller;
    private int columns = 0;

    /**
     * Creates new form TableCreationPanel
     *
     * @param c
     */
    public TableCreationPanel(Controller c) {
        initComponents();
        controller = c;
        String[] types = controller.getTypesList();
        TableColumn typeColumn = tblAttributes.getColumnModel().getColumn(2);
        for(String type : types) {
            cbxTypes.addItem(type);
        }
        typeColumn.setCellEditor(new DefaultCellEditor(cbxTypes));

        //set du nbr de lignes de la table 
        try {
            String strNbCol = JOptionPane.showInputDialog("Entrer le nombre de colonnes : ");
            if (strNbCol == null) {
                columns = 0;
            } else {
                columns = Integer.parseInt(strNbCol);
            }
        } catch (HeadlessException | NumberFormatException e) {
            //  }   
        }

        DefaultTableModel model = (DefaultTableModel) tblAttributes.getModel();
        model.setRowCount(0);
        Object[] row = null;

        for (int i = 0; i < columns; i++) {
            model.addRow(row);
        }

    }

    public JTextField getTableName() {
        return txtTableName;
    }

    public JButton getButton(String s) {
        switch(s) {
            case "confirm":
                return btnCreateTable;
            case "cancel":
                return btnCancel;
            default:
                return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbxTypes = new javax.swing.JComboBox<>();
        lblTableName = new javax.swing.JLabel();
        txtTableName = new javax.swing.JTextField();
        scroll = new javax.swing.JScrollPane();
        tblAttributes = new javax.swing.JTable();
        btnCreateTable = new javax.swing.JButton();
        btnRemoveRow = new javax.swing.JButton();
        btnAddRow = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        lblTableName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblTableName.setText("Nom de la table :");

        txtTableName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtTableName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTableName.setMaximumSize(new java.awt.Dimension(128, 20));
        txtTableName.setMinimumSize(new java.awt.Dimension(128, 20));
        txtTableName.setPreferredSize(new java.awt.Dimension(128, 20));
        txtTableName.setDocument(new DatabaseObjectTextDocument());

        tblAttributes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Nom", "Type", "Longueur", "Clé primaire", "Not null", "Unique", "Clé étrangère", "Table FK", "Référence FK"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAttributes.getModel().addTableModelListener(
            new TableModelListener() 
            {
                public void tableChanged(TableModelEvent e) 
                {
                    //  int row = e.getFirstRow();
                    // int column = e.getColumn();
                    //   TableModel model = (TableModel)e.getSource();
                    //    String columnName = model.getColumnName(column);
                    //   Object data = model.getValueAt(row, column);

                }
            });
            scroll.setViewportView(tblAttributes);

            btnCreateTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            btnCreateTable.setText("Créer Table");
            btnCreateTable.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCreateTableActionPerformed(evt);
                }
            });

            btnRemoveRow.setText("Retirer une colonne");
            btnRemoveRow.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnRemoveRowActionPerformed(evt);
                }
            });

            btnAddRow.setText("Ajouter une colonne");
            btnAddRow.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnAddRowActionPerformed(evt);
                }
            });

            btnCancel.setText("Annuler");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnAddRow, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                        .addComponent(btnRemoveRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCreateTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblTableName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtTableName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGap(18, 18, 18)
                    .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtTableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTableName))
                            .addGap(96, 96, 96)
                            .addComponent(btnAddRow)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnRemoveRow)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreateTable, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGap(34, 34, 34))
            );
        }// </editor-fold>//GEN-END:initComponents

    private void btnCreateTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateTableActionPerformed
        TableModel tableModel = tblAttributes.getModel();
        boolean primaire = false;
        boolean etrangere = false;
        String pk = "";
        String fk = "";
        String notNull = "";
        String unique = "";
        String type = "";
        String req = "CREATE TABLE " + txtTableName.getText().toUpperCase() + " (";
        for (int i = 1; i < tableModel.getRowCount(); i++) {
            String nomAttribut = (String) tableModel.getValueAt(i, 0);
            if (i > 1) {
                req += ", " + nomAttribut;
            } else {
                req += nomAttribut;
            }
            for (int j = 1; j < tblAttributes.getColumnCount() + 1; j++) {
                switch (tableModel.getColumnName(j)) {
                    case "Type":
                    type = (String) tableModel.getValueAt(i, j);
                    break;
                    case "Longueur":
                    type = type + "(" + tableModel.getValueAt(i, j) + ")";
                    break;
                    case "Clé primaire":
                    if (tableModel.getValueAt(i, j) != null) {
                        primaire = (boolean) tableModel.getValueAt(i, j);
                    }
                    if (primaire) {
                        pk = ", CONSTRAINT pk_" + nomAttribut + " PRIMARY KEY (" + nomAttribut +")";
                    }
                    break;
                    case "Not null":
                    System.out.println(tableModel.getValueAt(i, j));
                    if (tableModel.getValueAt(i, j) != null) {
                        notNull += ", CONSTRAINT nn_" + nomAttribut.toLowerCase() + " CHECK(" + nomAttribut + " IS NOT NULL)";
                    }
                    break;
                    case "Clé étrangère":
                    if ( tableModel.getValueAt(i, j) != null) {
                        etrangere = (boolean) tableModel.getValueAt(i, j);
                    }
                    if (etrangere ==true)
                    {
                        fk = ", CONSTRAINT fk_" + nomAttribut.toLowerCase() + " FOREIGN KEY (" + nomAttribut.toUpperCase() + ") REFERENCES " +
                        (String) tableModel.getValueAt(i, j+1) + "(" + (String) tableModel.getValueAt(i, j+2) + ")";
                    }

                    break;
                    case "unique":
                    if (tableModel.getValueAt(i, j) != null) {
                        unique = ", CONSTRAINT un_" + nomAttribut.toLowerCase() + " UNIQUE (" + nomAttribut.toUpperCase() + ") ";
                    }

                    break;
                    case "Default":

                    if (tableModel.getValueAt(i, j) != null) {
                        type += " DEFAULT " + (String) tableModel.getValueAt(i, j);
                    }
                    break;
                }
            }
            req = req + " " + type;
            primaire = false;
        }
        req = req + pk + " " + fk + " " + notNull + " " + unique + ")";
        System.out.println(req);
        /*try {
            c.query(req);
            JOptionPane.showMessageDialog(this, "Table " + txtTableName.getText().toUpperCase() + " créée.");
        } catch (SQLException ex) {
            Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erreur à la création de la table \n" + ex);
        }*/
    }//GEN-LAST:event_btnCreateTableActionPerformed

    private void btnRemoveRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRowActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblAttributes.getModel();
        int nbRow = model.getRowCount();
        if(nbRow > 0)
        model.removeRow(nbRow - 1);
    }//GEN-LAST:event_btnRemoveRowActionPerformed

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblAttributes.getModel();
        Object[] row = null;
        model.addRow(row);
    }//GEN-LAST:event_btnAddRowActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreateTable;
    private javax.swing.JButton btnRemoveRow;
    private javax.swing.JComboBox<String> cbxTypes;
    private javax.swing.JLabel lblTableName;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tblAttributes;
    private javax.swing.JTextField txtTableName;
    // End of variables declaration//GEN-END:variables
}
